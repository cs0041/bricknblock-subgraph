// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundraisingContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FactoryToken extends ethereum.SmartContract {
  static bind(address: Address): FactoryToken {
    return new FactoryToken("FactoryToken", address);
  }

  allPropertyTokenContracts(param0: BigInt): Address {
    let result = super.call(
      "allPropertyTokenContracts",
      "allPropertyTokenContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_allPropertyTokenContracts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allPropertyTokenContracts",
      "allPropertyTokenContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createToken(
    name: string,
    symbol: string,
    _fundraisingContract: Address,
  ): Address {
    let result = super.call(
      "createToken",
      "createToken(string,string,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(_fundraisingContract),
      ],
    );

    return result[0].toAddress();
  }

  try_createToken(
    name: string,
    symbol: string,
    _fundraisingContract: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createToken",
      "createToken(string,string,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(_fundraisingContract),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryFundraising(): Address {
    let result = super.call(
      "factoryFundraising",
      "factoryFundraising():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_factoryFundraising(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryFundraising",
      "factoryFundraising():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryFundraisingDao(): Address {
    let result = super.call(
      "factoryFundraisingDao",
      "factoryFundraisingDao():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_factoryFundraisingDao(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryFundraisingDao",
      "factoryFundraisingDao():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllPropertyTokenContractsLength(): BigInt {
    let result = super.call(
      "getAllPropertyTokenContractsLength",
      "getAllPropertyTokenContractsLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAllPropertyTokenContractsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllPropertyTokenContractsLength",
      "getAllPropertyTokenContractsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreateFromFactoryToken(param0: Address): boolean {
    let result = super.call(
      "getCreateFromFactoryToken",
      "getCreateFromFactoryToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_getCreateFromFactoryToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getCreateFromFactoryToken",
      "getCreateFromFactoryToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  propertyGovernance(): Address {
    let result = super.call(
      "propertyGovernance",
      "propertyGovernance():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_propertyGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "propertyGovernance",
      "propertyGovernance():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factoryFundraisingDao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _propertyGovernance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _fundraisingContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFactoryFundraisingCall extends ethereum.Call {
  get inputs(): SetFactoryFundraisingCall__Inputs {
    return new SetFactoryFundraisingCall__Inputs(this);
  }

  get outputs(): SetFactoryFundraisingCall__Outputs {
    return new SetFactoryFundraisingCall__Outputs(this);
  }
}

export class SetFactoryFundraisingCall__Inputs {
  _call: SetFactoryFundraisingCall;

  constructor(call: SetFactoryFundraisingCall) {
    this._call = call;
  }

  get _factoryFundraising(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFactoryFundraisingCall__Outputs {
  _call: SetFactoryFundraisingCall;

  constructor(call: SetFactoryFundraisingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
