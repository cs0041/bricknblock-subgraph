type Fundraising @entity {
  id: ID!
  address: Bytes!
  nft: NFT!
  owner: Bytes!
  goalAmount: BigInt!
  minInvestment: BigInt!
  maxInvestment: BigInt!
  deadline: BigInt!
  totalRaised: BigInt!
  isCompleted: Boolean!
  investments: [Investment!]! @derivedFrom(field: "fundraising")
  propertyToken: PropertyToken
  createdAt: BigInt!
}

type FundraisingDao @entity {
  id: ID!
  address: Bytes!
  propertyToken: PropertyToken!
  proposal: Proposal!
  proposalId: BigInt!
  goalAmount: BigInt!
  minInvestment: BigInt!
  maxInvestment: BigInt!
  deadline: BigInt!
  totalRaised: BigInt!
  isCompleted: Boolean!
  investments: [Investment!]! @derivedFrom(field: "fundraisingDao")
  createdAt: BigInt!
}

type Investment @entity {
  id: ID!
  investor: Bytes!
  amount: BigInt!
  claimed: Boolean!
  fundraising: Fundraising
  fundraisingDao: FundraisingDao
  timestamp: BigInt!
}

type PropertyToken @entity {
  id: ID!
  address: Bytes!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  balances: [TokenBalance!]! @derivedFrom(field: "token")
  transfers: [Transfer!]! @derivedFrom(field: "token")
  fundraising: Fundraising
  fundraisingDao: FundraisingDao
  proposals: [Proposal!]! @derivedFrom(field: "propertyToken")
  nft: NFT
  dividends: [Dividend!]! @derivedFrom(field: "propertyToken")
  createdAt: BigInt!
}

type TokenHolder @entity {
  id: ID! # user wallet address
  address: Bytes!
  balances: [TokenBalance!]! @derivedFrom(field: "holder")
  delegatedTo: Bytes
  votingPower: BigInt!
  votes: [Vote!]! @derivedFrom(field: "voter")
}

type TokenBalance @entity {
  id: ID! # holder address + "-" + token address
  holder: TokenHolder!
  token: PropertyToken!
  balance: BigInt!
}

type Transfer @entity {
  id: ID!
  token: PropertyToken!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  owner: Bytes!
  name: String!
  location: String!
  area: BigInt!
  propertyType: String!
  documents: String! 
  image: String!
  isTokenized: Boolean!
  isVerified: Boolean!
  propertyToken: PropertyToken
  fundraising: Fundraising @derivedFrom(field: "nft")
}

type Proposal @entity {
  id: ID! # propertyToken-proposalId
  propertyToken: PropertyToken!
  proposalId: BigInt!
  proposer: Bytes!
  description: String!
  startTime: BigInt!
  endTime: BigInt!
  forVotes: BigInt!
  againstVotes: BigInt!
  executed: Boolean!
  proposalType: Int!
  target: Bytes
  callData: Bytes!
  proposalSnapshot: BigInt!
  state: Int! # Maps to ProposalState enum
  votes: [Vote!]! @derivedFrom(field: "proposal")
  fundraisingDao: FundraisingDao @derivedFrom(field: "proposal")
  createdAt: BigInt!
}

type Vote @entity {
  id: ID! # proposal-voter
  proposal: Proposal!
  voter: TokenHolder!
  voterAddress: Bytes! # Keep the raw address
  support: Boolean!
  weight: BigInt!
  timestamp: BigInt!
}

type Dividend @entity {
  id: ID! # propertyToken-dividendId
  propertyToken: PropertyToken!
  dividendId: BigInt!
  amount: BigInt!
  timestamp: BigInt!
  claims: [DividendClaim!]! @derivedFrom(field: "dividend")
  totalClaimed: BigInt!
}

type DividendClaim @entity {
  id: ID! # dividend-holder
  dividend: Dividend!
  holder: TokenHolder!
  amount: BigInt!
  timestamp: BigInt!
}
